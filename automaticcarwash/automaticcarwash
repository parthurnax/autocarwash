//LCD SETUP
#include  <Wire.h>
#include  <LiquidCrystal_I2C.h>
LiquidCrystal_I2C lcd(0x27, 2, 1, 0, 4, 5, 6, 7, 3, POSITIVE);  // Set the LCD I2C address

//MOTOR DRIVER SETUP
#define MotEnable 6 //Motor Enamble pin Runs on PWM signal
#define MotFwdz 38  // Motor z Forward pin
#define MotRevz 36 // Motor z Reverse pin

//For Brush PWM
#define brush 4 // Motor Brush

// PID Setup
#include <PID_v1.h>

// Y AXIS
#define CLKy 18
#define DTy 19
int currentStateCLKy;
int lastStateCLKy;
volatile int lastEncodedy = 0; // Here updated value of encoder store.
volatile long encoderValuey = 0; // Raw encoder value
int REVy = 0; // REQUIRED ENCODER VALUE
double inputy = 0, outputy = 0, setpointy = 0;
double kp = 1, ki = 0.001, kd = 0.001;
PID myPID(&inputy, &outputy, &setpointy, kp, ki, kd, DIRECT);
int jarak[60];

int PPR = 1600;  // Encoder Pulse per revolution.
int angle = 360; // Maximum degree of motion.

//RELAY PIN SETUP
int Yup = 49;
int Ydown = 51;
//OUTPUT BRUSH & BLOWER
int blower = 45;
int water = 43;

// Z AXIS
int encoderValueZ = 0;
int REVz = 0; // REQUIRED ENCODER VALUE
int resetZ = 53;
int res = 0;

//Control Button on Main Menu
int Button1=16;
int Button2=14;
int Button3=15;
int But1=0;
int But2=0;
int But3=0;
int pressed = 0;
String menu[] = {"Quick Wash", "Clean Wash", "Adjust Brush", "Clean Brush", "DimensionMapping", "Water Flush", "Brush Car", "Blow Car"};
int choose = 0;
int DimMap = 0;

// INPUT SERIAL MONITOR
String readString; //This while store the user input data
int User_Inputy = 0; // This while convert input string into integer

// PUSHBUTTON INPUT
const int input1 = 5;
const int input2 = 6;
const int input3 = 7;
int dInput1 = 0;
int dInput2 = 0;
int dInput3 = 0;

// HC-SR04
const int trigPin = 9;
const int echoPin = 10;
long duration;
int distance;

//FOR COUNTER
int i=0;

void setup(){
  for(int q=0;q<=60;q++){
    jarak[q]=0;
  }
  //For Display
  Serial.begin (9600);
  lcd.begin(16,2); // initialize the LCD// initialize the LCD
  lcd.backlight();
  delay(250);
  lcd.noBacklight();
  delay(250);
  lcd.backlight();

  //For Driver Motor
  pinMode(MotEnable, OUTPUT);

  //For Encoder Y
  attachInterrupt(digitalPinToInterrupt(18), handleEncodery, CHANGE);
  pinMode(CLKy,INPUT);
  pinMode(DTy,INPUT);
  lastStateCLKy = digitalRead(CLKy);

  //For Button
  pinMode(input1, INPUT);
  pinMode(input2, INPUT);
  pinMode(input3, INPUT);

  //For Y Adjust
  pinMode(Yup, OUTPUT);
  pinMode(Ydown, OUTPUT);
  digitalWrite(Yup, HIGH);
  digitalWrite(Ydown, HIGH);

  //For Brush & Blower
  pinMode(brush, OUTPUT);
  pinMode(blower, OUTPUT);
  digitalWrite(blower, HIGH);
  pinMode(water, OUTPUT);
  digitalWrite(water, HIGH);

  //For Encoder Z
  Serial.begin (9600);
 
  pinMode(2, INPUT);           // set pin to input
  pinMode(3, INPUT);           // set pin to input
  
  digitalWrite(2, HIGH);       // turn on pullup resistors
  digitalWrite(3, HIGH);       // turn on pullup resistors

  pinMode(resetZ, INPUT);
  digitalWrite(53, LOW);

  pinMode(Button1,INPUT);
  pinMode(Button2,INPUT);
  pinMode(Button3,INPUT);
  digitalWrite(14, LOW);
  digitalWrite(15, LOW);
  digitalWrite(16, LOW);
   
  //Setting up interrupt
  //A rising pulse from encodenren activated ai0(). AttachInterrupt 0 is DigitalPin nr 2 on moust Arduino.
  attachInterrupt(0, ai0, RISING);
  
  //B rising pulse from encodenren activated ai1(). AttachInterrupt 1 is DigitalPin nr 3 on moust Arduino.
  attachInterrupt(1, ai1, RISING);


  //HC-SR04
  pinMode(trigPin, OUTPUT); // Sets the trigPin as an Output
  pinMode(echoPin, INPUT); // Sets the echoPin as an Input
  Serial.begin(9600);
}

void handleEncodery(){

    // Read the current state of CLKy
  currentStateCLKy = digitalRead(CLKy);

  if (currentStateCLKy != lastStateCLKy  && currentStateCLKy == 1){

    if (digitalRead(DTy) != currentStateCLKy) {
      encoderValuey ++;
    } else {
      // Encoder is rotating CW so increment
      encoderValuey --;
    }
  }

  // Remember last CLKy state
  lastStateCLKy = currentStateCLKy;

  // Put in a slight delay to help debounce the reading
  delay(1);
}

//Handle Encoder Z
void ai0() {
  if(digitalRead(3)==LOW) {
    encoderValueZ--;
  }else{
    encoderValueZ++;
  }
}
void ai1() {
  if(digitalRead(2)==LOW) {
    encoderValueZ++;
  }else{
    encoderValueZ--;
  }
}

void forwardy () {

 
        digitalWrite(Yup, LOW);
      digitalWrite(Ydown, HIGH);
}

void reversey () {


        digitalWrite(Yup, HIGH);
      digitalWrite(Ydown, LOW);
}

void finishy () {


        digitalWrite(Yup, HIGH);
      digitalWrite(Ydown, HIGH);
}

void forwardz () {
  digitalWrite(MotFwdz, HIGH); 
 digitalWrite(MotRevz, LOW); 
  
}

void reversez () {
  digitalWrite(MotFwdz, LOW); 
 digitalWrite(MotRevz, HIGH); 
  
}

void finishz () {
  digitalWrite(MotFwdz, LOW); 
 digitalWrite(MotRevz, LOW); 
  
}

void pwmOuty(int out) {                               
  if (out > 0) {                         // if REV > encoderValue motor move in forward direction.    
    analogWrite(MotEnable, 255);         // Enabling motor enable pin to reach the desire angle
    forwardy();                           // calling motor to move forward
    
  }
  else if (out < 0){
    analogWrite(MotEnable, abs(255));          // if REV < encoderValue motor move in forward direction.                      
    reversey();                            // calling motor to move reverse
  }
  else {
    analogWrite(MotEnable, 0);          // if REV < encoderValue motor move in forward direction.                      
    finishy();
  }
  readString=""; // Cleaning User input, ready for new Input
}

void pwmOutz(int out) {                               
  if (out > 0) {                         // if REV > encoderValue motor move in forward direction.    
    analogWrite(MotEnable, 255);         // Enabling motor enable pin to reach the desire angle
    forwardz();                           // calling motor to move forward
    
  }
  else if (out < 0){
    analogWrite(MotEnable, abs(255));          // if REV < encoderValue motor move in forward direction.                      
    reversez();                            // calling motor to move reverse
  }
  else {
    analogWrite(MotEnable, 0);          // if REV < encoderValue motor move in forward direction.                      
    finishz();
  }
  readString=""; // Cleaning User input, ready for new Input
}

void Y(int reqY){
  int loopingY = 0;
    while(loopingY == 0)
    {
      res = digitalRead(resetZ);
        if(res == HIGH){
            pwmOuty(0);
            encoderValuey=reqY;
        }
      
      if (encoderValuey < reqY-10){
      pwmOuty(255);
      }  
      else if (encoderValuey > reqY+10){
      pwmOuty(-255);
      }  
      else {
      pwmOuty(0);
      loopingY = 1;
      }
    }
  }

void Z(int reqZ){
  int loopingZ = 0;
  int dispensasi = 15;
    while(loopingZ == 0)
    {
      Serial.print(reqZ);
      Serial.print(" ");
      Serial.println(encoderValueZ);
      res = digitalRead(resetZ);
      if(reqZ==0){
        while(res!=HIGH)
        {
            pwmOutz(-255);
            res = digitalRead(resetZ);
        }
        pwmOutz(255);
        delay(100);
        pwmOutz(0);
        encoderValueZ=0;
        loopingZ = 1;
      }
      
      else if (encoderValueZ < reqZ-dispensasi){
      res = digitalRead(resetZ);
        pwmOutz(255);
        if(res == HIGH){
            pwmOutz(-255);
            delay(100);
            pwmOutz(0);
            encoderValueZ=reqZ;
        }
      }  
      
      else if (encoderValueZ > reqZ+dispensasi){
      pwmOutz(-255);      
      }  
      else if (encoderValueZ <= reqZ+dispensasi && encoderValueZ >= reqZ-dispensasi){
      pwmOutz(0);
      loopingZ = 1;
      }
      else {
        lcd.clear();
        lcd.setCursor(0,0);
        lcd.print("FATAL ERROR");
        lcd.setCursor(0,1);
        lcd.print("FAILED MOVING Z");
        continue;
      }
    }
  }

void Ultrasonic(){
    digitalWrite(trigPin, LOW);
    delayMicroseconds(2);
    digitalWrite(trigPin, HIGH);
    delayMicroseconds(10);
    digitalWrite(trigPin, LOW);
    duration = pulseIn(echoPin, HIGH);
    distance= duration*0.034/2;
}

//Delete Soon
void InputUserSerial(){
    while (Serial.available()) { //Check if the serial data is available.
    delay(3);                  // a small delay
    char c = Serial.read();  // storing input data
    readString += c;         // accumulate each of the characters in readString
  }
 
  if (readString.length() >0) { //Verify that the variable contains information
  
   Serial.println(readString.toInt());  //printing the input data in integer form
    User_Inputy = readString.toInt();   // here input data is store in integer form
    
  }

  REVy = User_Inputy;
  Serial.print("this is REVy - "); 
  Serial.println(REVy);

 inputy = encoderValuey ;           // data from encoder consider as a Process value
 Serial.print("encoderValueY - ");
 Serial.println(encoderValuey);
}

void Adjust(){
  Serial.println("Masuk adjust");
  pressed = 0;
  while(pressed != 1){
    But1 = digitalRead(Button1);
    But2 = digitalRead(Button2);
    But3 = digitalRead(Button3);
    Serial.println("Masuk while");
    delay(100);
    if(But1==HIGH){
        Serial.println("Up Pressed");
        lcd.clear();
        lcd.setCursor(0,0);
        lcd.print("Adjust: Up");
        Y(-100);
        lcd.setCursor(0,1);
        lcd.print("High Pos: ");
        lcd.print(encoderValueZ);
        delay(1000);
        encoderValuey=0;
    }
    else if(But3==HIGH){
        Serial.println("Down Pressed");
        lcd.clear();
        lcd.setCursor(0,0);
        lcd.print("Adjust: Down");
        Y(100);
        lcd.setCursor(0,1);
        lcd.print("High Pos: ");
        lcd.print(encoderValuey);
        delay(1000);
        encoderValuey=0;
    }
    else if(But2==HIGH){
        Serial.println("Done Pressed");
        lcd.clear();
        lcd.setCursor(0,0);
        lcd.print("Adjust Done");
        lcd.setCursor(0,1);
        lcd.print("Please Wait..(3)");
        delay(1000);
        lcd.clear();
        lcd.setCursor(0,0);
        lcd.print("Adjust Done");
        lcd.setCursor(0,1);
        lcd.print("Please Wait..(2)");
        delay(1000);
        lcd.clear();
        lcd.setCursor(0,0);
        lcd.print("Adjust Done");
        lcd.setCursor(0,1);
        lcd.print("Please Wait..(1)");
        delay(1000);
        pressed=1;
    }
    else{
        lcd.clear();
        lcd.setCursor(0,0);
        lcd.print(" Push to Adjust ");
        lcd.setCursor(0,1);
        lcd.print("UP    OK    DOWN");
    }
  }
}

void DimensionMapping(){
  int j=0;
  Serial.println("STARTDimensionMapping");
      for(j=0;j<=47;j++){
        lcd.clear();
        lcd.setCursor(0,0);
        lcd.print("DimensionMapping");
        lcd.setCursor(0,1);
        lcd.print("High Distance:");
        delay(100);
        Ultrasonic();
        jarak[j] = distance;
        lcd.print(distance);
        delay(200);
        Serial.println(j);
        Z(j*200);
        }
     delay(300);
     Z(0);
     DimMap=1;
  }

void Blowering(){
     digitalWrite(blower, LOW);
        lcd.clear();
        lcd.setCursor(0,0);
        lcd.print("Blower On...");
        lcd.setCursor(0,1);
        lcd.print("Please wait");
        
          for(i=0;i<=9;i++){
            Z(i*1000);
            delay(500);
            }
           Z(10000);
           delay(1000);
           Z(0);
           delay(1000);
           Z(10000);
           delay(1000);
           Z(0);
           digitalWrite(blower, HIGH);
}

void Watering(){
     digitalWrite(water, LOW);
        lcd.clear();
        lcd.setCursor(0,0);
        lcd.print("Watering...");
        lcd.setCursor(0,1);
        lcd.print("Please wait");
           Z(10000);
           delay(1000);
           Z(0);
           delay(1000);
           Z(10000);
           delay(1000);
           Z(0);
           digitalWrite(water, HIGH);
}

void Brushing(){
int k=0;
      for(k=0;k<=47;k++){
        lcd.clear();
        lcd.setCursor(0,0);
        lcd.print("Brushing...");
        lcd.setCursor(0,1);
        lcd.print("Please wait");
        Z(k*200);
        Y(jarak[k+5]*70);
            digitalWrite(brush, HIGH);
            delay(1000);
            digitalWrite(brush, LOW);
        }
      Y(0);
      Z(0);
   delay(1000);
  //water relay off
}

void mainmenu() {
  int j=0;
  int pilihmenu=0;
  lcd.clear();
  lcd.setCursor(0,0);
  lcd.print("  SMART GARAGE  ");
  lcd.setCursor(0,1);
  lcd.print("MENU------------");
  pressed = 0;
  while(pressed != 1){
    But1 = digitalRead(Button1);
    But2 = digitalRead(Button2);
    But3 = digitalRead(Button3);
    delay(100);
    if(But1==HIGH){
        j=0;
        lcd.clear();
        lcd.setCursor(0,0);
        lcd.print("Select to Choose");
        lcd.setCursor(0,1);
        lcd.print("SELECT  OK  HOME");
        pilihmenu=0;
        while(pilihmenu != 1){
            But1 = digitalRead(Button1);
            But2 = digitalRead(Button2);
            But3 = digitalRead(Button3);
            if (But1==HIGH){
                lcd.clear();
                lcd.setCursor(0,0);
                j++;
                if(j>=8)j=0;
                lcd.print(menu[j]);
                lcd.setCursor(0,1);
                lcd.print("SELECT  OK  HOME");
                Serial.println(j);
                delay(500);
            }else if (But2==HIGH){
              
              switch(j){
                case 0://Quick Wash
                {
                    delay(500);
                    DimensionMapping();
                    Watering();
                    Brushing();
                    Blowering();
                    pilihmenu=1;
                    pressed=1;
                    break;
                }
                case 1://Clean Wash
                {
                    delay(500);
                    DimensionMapping();
                    Watering();
                    Brushing();
                    Watering();
                    Brushing();
                    Blowering();
                    pilihmenu=1;
                    pressed=1;
                    break;
                }
                case 2://Adjust Brush
                {
                    Serial.println(menu[j]);
                    delay(500);
                    Adjust();
                    pilihmenu=1;
                    pressed=1;
                    break;
                }
                case 3://Clean Brush
                {
                    lcd.clear();
                    lcd.setCursor(0,0);
                    lcd.print("Cleaning Brush");
                    lcd.setCursor(0,1);
                    lcd.print("Please Wait...");
                    Serial.println(menu[j]);
                    Y(1000);
                    digitalWrite(brush,HIGH);
                    delay(3000);
                    digitalWrite(brush,LOW);
                    Y(0);
                    pilihmenu=1;
                    pressed=1;
                    break;
                }
                case 4://Dimension Mapping
                {
                    DimensionMapping();
                    pilihmenu=1;
                    pressed=1;
                    break;
                }
                case 5://Water Flush
                {
                    Watering();
                    pilihmenu=1;
                    pressed=1;
                    break;
                }
                case 6://Brush Car
                {
                  if(DimMap!=0){
                    Watering();
                    Brushing();
                    pilihmenu=1;
                    pressed=1;
                    break;
                  }else{
                    lcd.clear();
                    lcd.setCursor(0,0);
                    lcd.print("PLEASE MAP YOUR");
                    lcd.setCursor(0,1);
                    lcd.print("DIMENSION FIRST");
                    delay(3000);
                    pilihmenu=1;
                    pressed=1;
                    break;
                  }
                }
                case 7://Blow Car
                {
                    Blowering();
                    pilihmenu=1;
                    pressed=1;
                    break;
                }
              
              }
               delay(500);
            }
            else if (But3==HIGH){
                pilihmenu=1;
                pressed=1;
            }
        }
    }
  }
}

void loop() {
  
    mainmenu();
  
}
